import { DocumentNode } from "graphql";
import { CoreFeatures, Schema } from "./definitions";
import { JoinSpecDefinition } from "./joinSpec";
import { Subgraphs } from ".";
export declare const DEFAULT_SUPPORTED_SUPERGRAPH_FEATURES: Set<string>;
export declare function validateSupergraph(supergraph: Schema): [CoreFeatures, JoinSpecDefinition];
export declare function isFed1Supergraph(supergraph: Schema): boolean;
export declare class Supergraph {
    readonly schema: Schema;
    private readonly shouldValidate;
    private readonly containedSubgraphs;
    private _subgraphs?;
    constructor(schema: Schema, supportedFeatures?: Set<string> | null, shouldValidate?: boolean);
    static build(supergraphSdl: string | DocumentNode, options?: {
        supportedFeatures?: Set<string>;
        validateSupergraph?: boolean;
    }): Supergraph;
    subgraphsMetadata(): readonly {
        name: string;
        url: string;
    }[];
    subgraphs(): Subgraphs;
    apiSchema(): Schema;
}
//# sourceMappingURL=supergraphs.d.ts.map